// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: addressbook.capnp

#ifndef CAPNP_INCLUDED_9eb32e19f86ee174_
#define CAPNP_INCLUDED_9eb32e19f86ee174_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(98808e9832e8bc18);
CAPNP_DECLARE_SCHEMA(814e90b29c9e8ad0);
CAPNP_DECLARE_SCHEMA(91e0bd04d585062f);
enum class Type_91e0bd04d585062f: uint16_t {
  MOBILE,
  HOME,
  WORK,
};
CAPNP_DECLARE_ENUM(Type, 91e0bd04d585062f);
CAPNP_DECLARE_SCHEMA(bb0b2bd4bdc3693d);
CAPNP_DECLARE_SCHEMA(f934d9b354a8a134);

}  // namespace schemas
}  // namespace capnp

namespace addressbook {

struct Person {
  Person() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct PhoneNumber;
  struct Employment;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98808e9832e8bc18, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Person::PhoneNumber {
  PhoneNumber() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_91e0bd04d585062f Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(814e90b29c9e8ad0, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Person::Employment {
  Employment() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNEMPLOYED,
    EMPLOYER,
    SCHOOL,
    SELF_EMPLOYED,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb0b2bd4bdc3693d, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct AddressBook {
  AddressBook() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f934d9b354a8a134, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Person::Reader {
public:
  typedef Person Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasEmail() const;
  inline  ::capnp::Text::Reader getEmail() const;

  inline bool hasPhones() const;
  inline  ::capnp::List< ::addressbook::Person::PhoneNumber>::Reader getPhones() const;

  inline Employment::Reader getEmployment() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Person::Builder {
public:
  typedef Person Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasEmail();
  inline  ::capnp::Text::Builder getEmail();
  inline void setEmail( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEmail(unsigned int size);
  inline void adoptEmail(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEmail();

  inline bool hasPhones();
  inline  ::capnp::List< ::addressbook::Person::PhoneNumber>::Builder getPhones();
  inline void setPhones( ::capnp::List< ::addressbook::Person::PhoneNumber>::Reader value);
  inline  ::capnp::List< ::addressbook::Person::PhoneNumber>::Builder initPhones(unsigned int size);
  inline void adoptPhones(::capnp::Orphan< ::capnp::List< ::addressbook::Person::PhoneNumber>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::addressbook::Person::PhoneNumber>> disownPhones();

  inline Employment::Builder getEmployment();
  inline Employment::Builder initEmployment();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Person::Pipeline {
public:
  typedef Person Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Employment::Pipeline getEmployment();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Person::PhoneNumber::Reader {
public:
  typedef PhoneNumber Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasNumber() const;
  inline  ::capnp::Text::Reader getNumber() const;

  inline  ::addressbook::Person::PhoneNumber::Type getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Person::PhoneNumber::Builder {
public:
  typedef PhoneNumber Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNumber();
  inline  ::capnp::Text::Builder getNumber();
  inline void setNumber( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNumber(unsigned int size);
  inline void adoptNumber(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNumber();

  inline  ::addressbook::Person::PhoneNumber::Type getType();
  inline void setType( ::addressbook::Person::PhoneNumber::Type value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Person::PhoneNumber::Pipeline {
public:
  typedef PhoneNumber Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Person::Employment::Reader {
public:
  typedef Employment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnemployed() const;
  inline  ::capnp::Void getUnemployed() const;

  inline bool isEmployer() const;
  inline bool hasEmployer() const;
  inline  ::capnp::Text::Reader getEmployer() const;

  inline bool isSchool() const;
  inline bool hasSchool() const;
  inline  ::capnp::Text::Reader getSchool() const;

  inline bool isSelfEmployed() const;
  inline  ::capnp::Void getSelfEmployed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Person::Employment::Builder {
public:
  typedef Employment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnemployed();
  inline  ::capnp::Void getUnemployed();
  inline void setUnemployed( ::capnp::Void value = ::capnp::VOID);

  inline bool isEmployer();
  inline bool hasEmployer();
  inline  ::capnp::Text::Builder getEmployer();
  inline void setEmployer( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEmployer(unsigned int size);
  inline void adoptEmployer(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEmployer();

  inline bool isSchool();
  inline bool hasSchool();
  inline  ::capnp::Text::Builder getSchool();
  inline void setSchool( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSchool(unsigned int size);
  inline void adoptSchool(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSchool();

  inline bool isSelfEmployed();
  inline  ::capnp::Void getSelfEmployed();
  inline void setSelfEmployed( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Person::Employment::Pipeline {
public:
  typedef Employment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AddressBook::Reader {
public:
  typedef AddressBook Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPeople() const;
  inline  ::capnp::List< ::addressbook::Person>::Reader getPeople() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AddressBook::Builder {
public:
  typedef AddressBook Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPeople();
  inline  ::capnp::List< ::addressbook::Person>::Builder getPeople();
  inline void setPeople( ::capnp::List< ::addressbook::Person>::Reader value);
  inline  ::capnp::List< ::addressbook::Person>::Builder initPeople(unsigned int size);
  inline void adoptPeople(::capnp::Orphan< ::capnp::List< ::addressbook::Person>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::addressbook::Person>> disownPeople();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AddressBook::Pipeline {
public:
  typedef AddressBook Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t Person::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Person::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Person::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Person::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Person::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Person::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Person::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Person::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Person::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Person::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Person::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Person::Reader::hasEmail() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Person::Builder::hasEmail() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Person::Reader::getEmail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Person::Builder::getEmail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Person::Builder::setEmail( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Person::Builder::initEmail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Person::Builder::adoptEmail(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Person::Builder::disownEmail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Person::Reader::hasPhones() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Person::Builder::hasPhones() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::addressbook::Person::PhoneNumber>::Reader Person::Reader::getPhones() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person::PhoneNumber>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::addressbook::Person::PhoneNumber>::Builder Person::Builder::getPhones() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person::PhoneNumber>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Person::Builder::setPhones( ::capnp::List< ::addressbook::Person::PhoneNumber>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person::PhoneNumber>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::addressbook::Person::PhoneNumber>::Builder Person::Builder::initPhones(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person::PhoneNumber>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Person::Builder::adoptPhones(
    ::capnp::Orphan< ::capnp::List< ::addressbook::Person::PhoneNumber>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person::PhoneNumber>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::addressbook::Person::PhoneNumber>> Person::Builder::disownPhones() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person::PhoneNumber>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline Person::Employment::Reader Person::Reader::getEmployment() const {
  return Person::Employment::Reader(_reader);
}
inline Person::Employment::Builder Person::Builder::getEmployment() {
  return Person::Employment::Builder(_builder);
}
#if !CAPNP_LITE
inline Person::Employment::Pipeline Person::Pipeline::getEmployment() {
  return Person::Employment::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline Person::Employment::Builder Person::Builder::initEmployment() {
  _builder.setDataField< ::uint16_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  return Person::Employment::Builder(_builder);
}
inline bool Person::PhoneNumber::Reader::hasNumber() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Person::PhoneNumber::Builder::hasNumber() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Person::PhoneNumber::Reader::getNumber() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Person::PhoneNumber::Builder::getNumber() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Person::PhoneNumber::Builder::setNumber( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Person::PhoneNumber::Builder::initNumber(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Person::PhoneNumber::Builder::adoptNumber(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Person::PhoneNumber::Builder::disownNumber() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::addressbook::Person::PhoneNumber::Type Person::PhoneNumber::Reader::getType() const {
  return _reader.getDataField< ::addressbook::Person::PhoneNumber::Type>(
      0 * ::capnp::ELEMENTS);
}

inline  ::addressbook::Person::PhoneNumber::Type Person::PhoneNumber::Builder::getType() {
  return _builder.getDataField< ::addressbook::Person::PhoneNumber::Type>(
      0 * ::capnp::ELEMENTS);
}
inline void Person::PhoneNumber::Builder::setType( ::addressbook::Person::PhoneNumber::Type value) {
  _builder.setDataField< ::addressbook::Person::PhoneNumber::Type>(
      0 * ::capnp::ELEMENTS, value);
}

inline Person::Employment::Which Person::Employment::Reader::which() const {
  return _reader.getDataField<Which>(2 * ::capnp::ELEMENTS);
}
inline Person::Employment::Which Person::Employment::Builder::which() {
  return _builder.getDataField<Which>(2 * ::capnp::ELEMENTS);
}

inline bool Person::Employment::Reader::isUnemployed() const {
  return which() == Person::Employment::UNEMPLOYED;
}
inline bool Person::Employment::Builder::isUnemployed() {
  return which() == Person::Employment::UNEMPLOYED;
}
inline  ::capnp::Void Person::Employment::Reader::getUnemployed() const {
  KJ_IREQUIRE(which() == Person::Employment::UNEMPLOYED,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Person::Employment::Builder::getUnemployed() {
  KJ_IREQUIRE(which() == Person::Employment::UNEMPLOYED,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Person::Employment::Builder::setUnemployed( ::capnp::Void value) {
  _builder.setDataField<Person::Employment::Which>(
      2 * ::capnp::ELEMENTS, Person::Employment::UNEMPLOYED);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Person::Employment::Reader::isEmployer() const {
  return which() == Person::Employment::EMPLOYER;
}
inline bool Person::Employment::Builder::isEmployer() {
  return which() == Person::Employment::EMPLOYER;
}
inline bool Person::Employment::Reader::hasEmployer() const {
  if (which() != Person::Employment::EMPLOYER) return false;
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Person::Employment::Builder::hasEmployer() {
  if (which() != Person::Employment::EMPLOYER) return false;
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Person::Employment::Reader::getEmployer() const {
  KJ_IREQUIRE(which() == Person::Employment::EMPLOYER,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Person::Employment::Builder::getEmployer() {
  KJ_IREQUIRE(which() == Person::Employment::EMPLOYER,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Person::Employment::Builder::setEmployer( ::capnp::Text::Reader value) {
  _builder.setDataField<Person::Employment::Which>(
      2 * ::capnp::ELEMENTS, Person::Employment::EMPLOYER);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Person::Employment::Builder::initEmployer(unsigned int size) {
  _builder.setDataField<Person::Employment::Which>(
      2 * ::capnp::ELEMENTS, Person::Employment::EMPLOYER);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Person::Employment::Builder::adoptEmployer(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Person::Employment::Which>(
      2 * ::capnp::ELEMENTS, Person::Employment::EMPLOYER);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Person::Employment::Builder::disownEmployer() {
  KJ_IREQUIRE(which() == Person::Employment::EMPLOYER,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Person::Employment::Reader::isSchool() const {
  return which() == Person::Employment::SCHOOL;
}
inline bool Person::Employment::Builder::isSchool() {
  return which() == Person::Employment::SCHOOL;
}
inline bool Person::Employment::Reader::hasSchool() const {
  if (which() != Person::Employment::SCHOOL) return false;
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Person::Employment::Builder::hasSchool() {
  if (which() != Person::Employment::SCHOOL) return false;
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Person::Employment::Reader::getSchool() const {
  KJ_IREQUIRE(which() == Person::Employment::SCHOOL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Person::Employment::Builder::getSchool() {
  KJ_IREQUIRE(which() == Person::Employment::SCHOOL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Person::Employment::Builder::setSchool( ::capnp::Text::Reader value) {
  _builder.setDataField<Person::Employment::Which>(
      2 * ::capnp::ELEMENTS, Person::Employment::SCHOOL);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Person::Employment::Builder::initSchool(unsigned int size) {
  _builder.setDataField<Person::Employment::Which>(
      2 * ::capnp::ELEMENTS, Person::Employment::SCHOOL);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Person::Employment::Builder::adoptSchool(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Person::Employment::Which>(
      2 * ::capnp::ELEMENTS, Person::Employment::SCHOOL);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Person::Employment::Builder::disownSchool() {
  KJ_IREQUIRE(which() == Person::Employment::SCHOOL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Person::Employment::Reader::isSelfEmployed() const {
  return which() == Person::Employment::SELF_EMPLOYED;
}
inline bool Person::Employment::Builder::isSelfEmployed() {
  return which() == Person::Employment::SELF_EMPLOYED;
}
inline  ::capnp::Void Person::Employment::Reader::getSelfEmployed() const {
  KJ_IREQUIRE(which() == Person::Employment::SELF_EMPLOYED,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Person::Employment::Builder::getSelfEmployed() {
  KJ_IREQUIRE(which() == Person::Employment::SELF_EMPLOYED,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Person::Employment::Builder::setSelfEmployed( ::capnp::Void value) {
  _builder.setDataField<Person::Employment::Which>(
      2 * ::capnp::ELEMENTS, Person::Employment::SELF_EMPLOYED);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool AddressBook::Reader::hasPeople() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool AddressBook::Builder::hasPeople() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::addressbook::Person>::Reader AddressBook::Reader::getPeople() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::addressbook::Person>::Builder AddressBook::Builder::getPeople() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AddressBook::Builder::setPeople( ::capnp::List< ::addressbook::Person>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::addressbook::Person>::Builder AddressBook::Builder::initPeople(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void AddressBook::Builder::adoptPeople(
    ::capnp::Orphan< ::capnp::List< ::addressbook::Person>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::addressbook::Person>> AddressBook::Builder::disownPeople() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::addressbook::Person>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_9eb32e19f86ee174_
